AWSTemplateFormatVersion: '2010-09-09'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: eks-vpc

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/20"
      AvailabilityZone: "ap-southeast-2a"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.16.0/20"
      AvailabilityZone: "ap-southeast-2b"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Allow all traffic"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
          
  EKSClusterRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: EKSClusterRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "eks.amazonaws.com"
            Action: "sts:AssumeRole"

  EKSCluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: eks-cluster
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref SubnetA
        SecurityGroupIds:
          - !Ref SecurityGroup

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: eks-node-group
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 3
        MinSize: 1
      InstanceTypes:
        - t2.micro
      NodeRole: !GetAtt EKSClusterRole.Arn

Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster
    Description: "EKS Cluster Name"
